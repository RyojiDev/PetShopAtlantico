// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetshopAtlantico.DataBaseAccess.Entity;

namespace PetShopAtlanticoWebApi.Migrations
{
    [DbContext(typeof(PetShopDbContext))]
    [Migration("20210506044822_inserting_data")]
    partial class inserting_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetShopAtlantico.Domain.PetAccomodation", b =>
                {
                    b.Property<int>("PetAccomodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetAccomodationId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccommodationStatus")
                        .HasColumnType("int")
                        .HasColumnName("AccommodationStatus");

                    b.Property<bool>("Available")
                        .HasColumnType("bit")
                        .HasColumnName("Available");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("PetAccomodationId");

                    b.ToTable("PetAccomodations");

                    b.HasData(
                        new
                        {
                            PetAccomodationId = 1,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 1"
                        },
                        new
                        {
                            PetAccomodationId = 2,
                            AccommodationStatus = 0,
                            Available = false,
                            Name = "Alojamento num 2"
                        },
                        new
                        {
                            PetAccomodationId = 3,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 3"
                        },
                        new
                        {
                            PetAccomodationId = 4,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 4"
                        },
                        new
                        {
                            PetAccomodationId = 5,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 5"
                        },
                        new
                        {
                            PetAccomodationId = 6,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 6"
                        },
                        new
                        {
                            PetAccomodationId = 7,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 7"
                        },
                        new
                        {
                            PetAccomodationId = 8,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 8"
                        },
                        new
                        {
                            PetAccomodationId = 9,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 9"
                        },
                        new
                        {
                            PetAccomodationId = 10,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 10"
                        },
                        new
                        {
                            PetAccomodationId = 11,
                            AccommodationStatus = 0,
                            Available = true,
                            Name = "Alojamento num 11"
                        });
                });

            modelBuilder.Entity("PetshopAtlantico.Domain.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PetAccomodationId")
                        .HasColumnType("int");

                    b.Property<int>("PetHealth")
                        .HasColumnType("int");

                    b.Property<int>("PetOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PetPhotograph")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetAccomodationId");

                    b.HasIndex("PetOwnerId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetshopAtlantico.Domain.PetOwner", b =>
                {
                    b.Property<int>("PetOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetOwnerId");

                    b.ToTable("PetsOwner");
                });

            modelBuilder.Entity("PetshopAtlantico.Domain.Pet", b =>
                {
                    b.HasOne("PetShopAtlantico.Domain.PetAccomodation", "PetAccomodation")
                        .WithMany()
                        .HasForeignKey("PetAccomodationId");

                    b.HasOne("PetshopAtlantico.Domain.PetOwner", "PetOwner")
                        .WithMany("Pet")
                        .HasForeignKey("PetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetAccomodation");

                    b.Navigation("PetOwner");
                });

            modelBuilder.Entity("PetshopAtlantico.Domain.PetOwner", b =>
                {
                    b.Navigation("Pet");
                });
#pragma warning restore 612, 618
        }
    }
}
